---
title: |
  <b>プレゼミ2024</b> </br>
  <span style="color: #282A36; ">スライド</span>
author: "松浦総一"
format:
  revealjs:
    theme: ["default", "dracula.scss"]
    transition: convex
    slide-number: true
    chalkboard: true
    df_print: paged
    html-math-method: katex
# highlight-style: "dracula"
highlight-style: github

code-block-bg: "#F6F6F6"
# mainfont: "Hiragino Mincho ProN"
mainfont: "Noto Sans CJK JP"

execute:
  echo : TRUE
  message : FALSE
  warning: FALSE
  error: FALSE
  fig-width: 10
  fig-height: 6

lang: "ja"
# server: shiny
monofontoptions:
  - Scale = .5

# Set default options for every bookpage that may or may not include webR.
webr:
  # show-startup-message: false    # Disable displaying status of webR initialization
  packages: ['ggplot2', 'ggthemes','dplyr', 'gtsummary'] # Install R packages on document open

# Attach webR extension for the project
filters:
  - webr
---
---

## プレゼミとは？

```{r setup}
#| echo: false
library(ggplot2)
library(ggthemes)
library(plotly)
# ggplotの設定を mysytle に収納0
mystyle <- list (#  ggplotのテーマ
  theme_calc(), # ggthemesパッケージ
  scale_colour_calc(), # ggthemesパッケージ
  theme(
    text = element_text(
      size=12,  #  フォントサイズ
      family = "HiraKakuProN-W3" # ヒラギノフォント
    )
  ),
#  scale_y_continuous(expand = c(0,0)),
  scale_x_continuous(expand = c(0,0))
)
```

令和6年度(2024年度)の松浦プレゼミでは、**データに強い経営学部生**となるため、データ分析のツールとしてプログラミング言語**R**を使った分析スキルの修得を目指します。


## 分析スキル

プレゼミでは、

- 株価データ
- 会計データ
- POSデータ

といったデータベース以外にも、**自分で集めたアンケートのデータ**など、様々なデータを分析します。
数値データだけでなく、文書データを分析するスキルは会計・ファイナンスだけでなく、組織、戦略、マーケティングと様々な分野で役立ちます。

## 資料作成

- 分析した結果をレポートにまとめることも重要です。
- 分析の再現可能性を高めるための有用なツールとして、**Quarto**を使います。
- **Quarto**(クアルト)とは、Markdown記法で書かれた文章の中に、RだけでなくPythonなど他の言語も組み込める便利なツールです。


## なぜRを使うのか？

Rを使うメリットとデメリットをまとめました。

<!-- :::{.column-margin}
データ分析のツールとして大学で使うことが多いのはMS Excelですが，MS Excelは表計算ソフトウェアであり，統計分析を行うこともできますが，データ分析界ではほとんど使われません。データアナリストが利用しているプログラミング言語として主要なものは，**Python**(パイソン)，**Julia**(ジュリア)，そして**R**(アール)です。
::: -->

:::{layout-ncol=2}

:::{.callout-important}
## メリット

- ぜんぶ**無料**
- 学習しやすい・教材たくさん
- 作業履歴が残る
- 卒業後も使える
- 大規模データもさくさく扱える。
- **なんかかっこいい**

:::

:::{.callout-note}
## デメリット

- いろいろインストールしたり，設定が必要
- 命令文でデータを操作するのでぱっと見わかりにくい。
- R言語の文法と単語を覚えなきゃいけない
- キーボード入力が多いので，タッチタイピング必須
:::

:::





## MS Excelだとダメなの？

表計算ソフト「Excel」を使うメリットとデメリット

:::{layout-ncol=2}

:::{.callout-important}
## メリット

- みんな使ってるし，就職しても使いそう
- 画面の表示が理解しやすい
- マウスでポチポチしているとグラフや表が作れてしまう。
:::

:::{.callout-note}
## デメリット

- **有料** (在学中は無料で利用可能)
- マウスで何度もポチポチしないといけない
- 過去のExcelファイルを見ても何をしたのか思い出せない
- Excelは大きなデータは扱えない
- アプリが重い、すぐ強制終了する
- グラフのデザインが悪い

:::

:::



## なぜQuartoを使うのか？

Quartoを使うメリット・デメリット

<!-- :::{.column-margin}
MS Wordのように、書いた文章がそのまま印刷されるようなWYSIWYG(What You See Is What You Get)なワープロソフトとは異なり、特定の記法にしたがって書かれた文章をコンピューターで処理することで印刷用の文書に変換するWYSIWYM(What You See Is What You Mean)な文書処理システムを**マークアップ言語**といいます。Markdownが代表的なマークアップ言語で、そこにRを組み込んだR Markdownが広く利用されています。そのR Markdownをさらに進化させて、文書内でRやPython, Juliaなどのコードを実行できるようにしたのがQuartoです。
マークアップ言語はWYSIWYM(What You See Is What You Mean)といい、コンパイルして完成品を確認するまで、どのように表示されるのかは分かりませんが、記法に従って書けば、最終的にはきれいなレポートができあがります。
::: -->

:::{layout-ncol=2}

:::{.callout-important}
## メリット

- Markdown形式で記述できるので、簡単に論文・レポートの体裁を整えられる
- 文章作成とデータ分析を同じ場所で行える
- 文章中にRだけでなくPythonやJuliaを組み込める
- グラフや表のデザインがきれい
- **なんかかっこいい**
- **無料**

:::

:::{.callout-note}
## デメリット

- Markdown記法を覚えないといけない
- 入力するものと出力されるものが違う。
- ビジネスで利用される場面が少ない
:::

:::


## なぜMS Wordだとダメなの？

MS Wordを使うメリット・デメリット

:::{layout-ncol=2}

:::{.callout-important}
## メリット

- みんな使ってるし，就職しても使いそう
- (だいたい)入力通りに印刷される
- 学習のための本や情報が多い
- もともとパソコンに入っていたりする
- 日本語チェックができる
:::

:::{.callout-note}
## デメリット

- **有料** (在学中は無料で利用可能)
- 箇条書きなどが勝手に設定され、整えるのに時間がかかる
- データ分析の結果を貼り付けると、修正が面倒
- アプリケーションが重いし、長い文章を書くと強制終了する

:::

:::

<!--
## IBM SPSSではどうか？

メリット

- MS Excelよりも統計分析に強いし正確
- ビジネスでよく利用されているらしい
- 難しい統計分析もいくつかクリックするだけで実行できる

デメリット

- かなり高い
- だいぶRに置き換えられてきている

## STATAではどうか？

- メリット：研究者はみんな使ってる。
- デメリット：高い。10万超え

-->

<!-- MS Excelは非常に役立つツールです。
ただ、データが大きくなるとExcelでは読み込めなくなる(Excelは縦に1,048,576行、横に16,384列が上限)が、RやPythonはPCのスペックに依存するものの、もっといける。

またExcelでグラフを作成しようとすると、メニューからグラフを選び、グラフの元となるデータを選択しといったように、メニューを何度もクリックすることになる。その結果、1週間後に同じグラフを作ろうと思っても、どうやって作ったのか思い出せなかったり、ちょっとデータを追加して新しいグラフを作ろうとすると、またいろんなところをポチポチする必要があり、再現可能性が低い。 -->

# Rでどんなことができる？

## 1. 楽にデータ操作ができる

- Rはデータ分析のためのプログラミング言語で、データを扱うためのパッケージが豊富に揃っています。
- Excelでは扱えないかなり大きなデータでも簡単にデータ操作ができます。
- 分析のプロセスをソースコードに残すことができるので、再現可能性が高いです。

## 練習用データ`iris`

データ分析の練習用データとして有名な`iris`データをいろいろ操作してみましょう。
`iris`は「あやめ」という花の花びらとがく片の長さと幅、あやめの分類名の合計5項目が150件収録されているデータベースです。`head()`関数を使って`iris`の先頭の6行を読み込んでみます。

```{r iris}
head(iris) # 最初の6行だけ
```

## 平均を計算する。

`Sepal.Length`、`Sepal.Width`、`Petal.Length`、`Petal.Width`、`Species`という5つの項目が入っていることが分かります。Sepalは花びらで、Petalはがく片です。まず花びらの長さ`Sepal.Length`の平均を求めてみましょう。平均を返す関数は`mean()`です。

```{r sepal_length}
mean(iris$Sepal.Length)
```

あやめの花びらの長さの平均は、`r mean(iris$Sepal.Length)`であることが分かりました。簡単ですね。

---

次に，あやめの花びらの長さの**標準偏差**を求めてみましょう。
標準偏差を返す関数は`sd()`です。
下のボックスの緑の三角ボタンを押すと，Rコードが実行され，下に結果が表示されます。
`sd()`で標準偏差，`max()`で最大値，`min()`で最小値，`median()`で中央値を求めることができるので，`sd`のところを書き換えて実行し，結果を確認してみてください。
```{webr-r}
sd(iris$Sepal.Length)
```

---

次に、あやめの種類を表す`Species`にはどんな種類があるのか見てみましょう。
`Species`に入っている種類を確認するには、`table()`関数を使ってみます。


```{webr-r}
table(iris$Species)
```
あやめの種類には、setosa、versicolor, virginicaがあり、それぞれ50個のデータがあることが分かります。

 次に、この`iris`を使って、グラフを作ってみます。

## 2. キレイなグラフが書ける。

次にRが得意とするグラフ作成を行います。
最初に、花びらの長さのヒストグラムを書いてみます。
さくっとヒストグラムを作るには，基本関数の`hist()`を使います。
`iris`データの`Sepal.Length`を使ってヒストグラムを作成してみましょう。

```{webr-r}
hist(iris$Sepal.Length)
```

## もっとキレイなグラフを書く。

非常に簡単かつ分かりやすく美しいグラフを作成できる`ggplot2`パッケージを使ってグラフを作成します。`library(ggplot2)`を実行して、`ggplot2`パッケージを読み込みます。

```{r graph_hist_sepal}
# install.packages("ggplot2") # 1回だけ実行
library(ggplot2)
```

---

次に、`ggplot2`を使って、花びらの長さのヒストグラムを書いてみます。

```{r}
g <- ggplot(iris) + aes(Sepal.Length) #データと変数を指定
g <- g + geom_histogram() # ヒストグラム
print(g) # グラフを表示
```

## グラフをカスタマイズする。

ヒストグラムの階級幅を変更したり、棒の数を変更するには、`geom_histogram()`の中で指定します。
例えば、階級幅を$0.5$でヒストグラムを作る場合は、`binwidth = 0.5`のように指定します。

```{r graph_hist_sepal_bin30}
g <- ggplot(iris) + aes(Sepal.Length) +
 geom_histogram(binwidth = 0.5)
print(g)
```


## グラフのデザインを変更する。

グラフが黒くて見づらいので、デザインをいじってみます。
`geom_histogram()`関数の中で、線を黒、中を薄青色に指定します。
```{r graph_hist_sepal_color}
g <- ggplot(iris) + aes(Sepal.Length) +
 geom_histogram(color="black", fill="lightblue",binwidth = .5)
print(g)
```

## グラフのテーマを変える。

背景が地味なので、グラフを雑誌Economist風にしてみます。

```{r hist_economist}
g + theme_economist_white() + scale_colour_economist()
```


## 2変数の散布図を書く。

次は花びらの長さと幅の散布図を書いてみます。
`ggplot2`で散布図を書くためには、`aes()`で$x$軸と$y$軸を指定し、`geom_point()`で散布図を指定する。

```{r graph_sepal}
ggplot(iris) + aes(x = Sepal.Length, y = Sepal.Width) +
 geom_point() + theme_economist()
```


## 色分けも簡単

カテゴリーを表す変数を`group`と`colour`で指定すると、カテゴリーごとにグループ化して、色分けもしてくれます。ここでは花の種類を表す変数である`Species`ごとに色分けしてみます。

```{r graph_species}
#| output-location: slide
g <- ggplot(iris) + # データセットirisを指定
  aes(x = Sepal.Length, # x軸 花びらの幅
      y = Sepal.Width, # y軸　花びらの幅
      color = Species # あやめの種類ごとに色分け
      ) +
      geom_point() + # 散布図を指定
      theme_economist() # テーマをEconomistに
print(g)
```

## インタラクティブなグラフも簡単

操作できるグラフも作れます。
`plotly`パッケージを使えば簡単です。

```{r graph_plotly}
#| output-location: slide
#| fig-width : 10
#| fig-height: 5
library(plotly)
ggplotly(g)
```

## 3. レポート・論文が作れる。

- データを分析した結果を表や図としてレポートや論文に載せる場合、MS Excelで作成した図や表を、MS Wordにコピペしてませんか？
- その場合、Wordで書いてたレポートの図表に少し修正を加えることになると、またExcelを開いて修正し、またコピペしたりしてませんか？
- レポートを2週間後に読んだとして、その図表を作成したExcelがどこにあるのか、またどうやって作ったのか思い出せますか？

**RとQuartoなら心配いりません。**

## Quartoで資料作成

- **Quarto**や**Rmarkdown**を使ってMarkdownでレポートを書けば、文章作成と図表を同じ場所で作成できます。
- このスライド資料も**Quarto**を使って作成し、GitHubで公開してます。

# 複雑な分析も簡単

## 複数の処理を実行

例えば、先ほどから使っている`iris`データで、

1. 「あやめ」の種類ごとに、
2. 花びらの長さと幅の平均、中央値、標準偏差を計算し、
3. それを表にする，

という処理を行いたいとしましょう。

## `dplyr`パッケージで実装

簡単です。Rならね。

::: {.panel-tabset}

### ソースコード
```{r table_iris}
#| eval: FALSE
iris %>%
  dplyr::group_by(Species) %>% # あやめの種類ごとに
  dplyr::summarise( # 以下の統計量を計算
    花びらの長さの平均 = mean(Sepal.Length),
    花びらの幅の平均 = mean(Sepal.Width),
    花びらの標準偏差 = sd(Sepal.Width)
  ) %>%
  knitr::kable(booktabs = TRUE)
```

### 結果


```{r}
#| echo: FALSE
iris %>%
  dplyr::group_by(Species) %>% # あやめの種類ごとに
  dplyr::summarise( # 以下の統計量を計算
    花びらの長さの平均 = mean(Sepal.Length),
    花びらの幅の平均 = mean(Sepal.Width),
    花びらの標準偏差 = sd(Sepal.Width)
  ) %>%
  knitr::kable(booktabs = TRUE)
```
:::

## 回帰分析も簡単

たとえば、あやめのがく片の長さが長いほど、花びらが長くなるかどうかを分析しようと回帰分析を行いたいとします。
つまり以下のような回帰モデルを考えます（数式もこんなにキレイに書けます）。
$$
Sepal.Length = \alpha + \beta \times Petal.Length + \varepsilon
$$

## 回帰分析も簡単

この回帰モデルを最小二乗法で推定した結果を表にしてみます。

::: {.panel-tabset}

### ソースコード

```{r}
#| eval: FALSE
library(gtsummary)
lm_fit <- lm(Sepal.Length ~ Petal.Length, data = iris)
tbl_regression(lm_fit,
               type = "html",
               title = "Regression Results",
               exponentiate = FALSE,
               digits = list(all_continuous() ~ 2),
               add_estimate_to_reference_rows = TRUE,
               bold_p = TRUE)
```

### 出力結果

```{r}
#| echo: FALSE
library(gtsummary)
lm_fit <- lm(Sepal.Length ~ Petal.Length, data = iris)
tbl_regression(lm_fit,
               type = "html",
               title = "Regression Results",
               exponentiate = FALSE,
               digits = list(all_continuous() ~ 2),
               add_estimate_to_reference_rows = TRUE,
               bold_p = TRUE)
```

:::

## 結果の作表も簡単

他にもこんな感じにできます。



::: {.panel-tabset}

### ソースコード

```{r iris_regress_kable}
#| eval: false
library(kableExtra)
library(broom)
lm_fit %>%
  tidy() %>%
  kable(
      caption = "Regression Results",
      booktabs = TRUE,
      digits = c(2, 2, 2, 2)) %>%
  kable_styling(full_width = FALSE) %>%
  column_spec(1, bold = TRUE) %>%
  row_spec(0, bold = TRUE, color = "white", background = "#0073C2")
```

### 出力結果

```{r}
#| echo: FALSE
library(kableExtra)
library(broom)
lm_fit %>%
  tidy() %>%
  kable(
      caption = "Regression Results",
      booktabs = TRUE,
      digits = c(2, 2, 2, 2)) %>%
  kable_styling(full_width = FALSE) %>%
  column_spec(1, bold = TRUE) %>%
  row_spec(0, bold = TRUE, color = "white", background = "#0073C2")
```

:::



## 回帰直線も簡単

あやめのがく片の長さと花びらが長さをグラフにし，そこに上で求めた回帰直線を引いてみます。


::: {.panel-tabset}

### ソースコード

```{r iris_regress_graph}
#| eval: FALSE
ggplot(iris, aes(x = Petal.Length, y = Sepal.Length)) +
  geom_point() +
  geom_smooth(method = "lm", se = FALSE) +
  theme_economist_white()
```

### 出力結果

```{r}
#| echo: FALSE
#| fig-width: 5
#| fig-height: 3 
ggplot(iris, aes(x = Petal.Length, y = Sepal.Length)) +
  geom_point() +
  geom_smooth(method = "lm", se = FALSE) +
  theme_economist_white()
```

:::

<!-- 上記の結果から，がく片が1センチ長くなると，花びらの長さが約4.1ミリ長くなることがわかります。 -->
このように、Rを使えば、データの操作から分析、結果の表や図の作成まで、一連の作業を一カ所で行うことができます。


## まとめ

つまり、経営学の知識、統計学の知識、それにRの知識を組み合わせれば、経営学で学んだ理論を使って仮説を考え、その仮説を検証するために必要なデータを集め、適切な統計分析手法を使い、その結果をまとめてレポート・論文にする一連のプロセスを、一カ所にまとめることができます。
さあ、Rを勉強して、統計分析と効率的なレポート・論文作成のスキルを身につけましょう。

